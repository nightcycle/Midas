[{"title":"DataTable","type":0,"sectionRef":"#","url":"/midas/api/DataTable","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"DataTable","url":"/midas/api/DataTable#functions","content":" "},{"title":"AddRow​","type":1,"pageTitle":"DataTable","url":"/midas/api/DataTable#AddRow","content":"&lt;/&gt; DataTable:AddRow(param: {[string]: unknown}) → () adds a row of data  "},{"title":"GetRowCount​","type":1,"pageTitle":"DataTable","url":"/midas/api/DataTable#GetRowCount","content":"&lt;/&gt; DataTable:GetRowCount() → number gets the number of rows that need to be processed  "},{"title":"Post​","type":1,"pageTitle":"DataTable","url":"/midas/api/DataTable#Post","content":"&lt;/&gt; DataTable:Post( maxEntries: number, maxSize: number ) → ( boolean, boolean, number ) processes the current rows  "},{"title":"AddColumn​","type":1,"pageTitle":"DataTable","url":"/midas/api/DataTable#AddColumn","content":"&lt;/&gt; DataTable:AddColumn( key: string, format: DataType, isNullable: boolean, keySymbol: string? ) → () adds a column, only to be used when initially constructing the table. Optional keySymbol parameter will swap out key at last second to reduce storage size "},{"title":"MongoDB","type":0,"sectionRef":"#","url":"/midas/api/MongoDB","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"MongoDB","url":"/midas/api/MongoDB#properties","content":" "},{"title":"DebugPrintEnabled​","type":1,"pageTitle":"MongoDB","url":"/midas/api/MongoDB#DebugPrintEnabled","content":"&lt;/&gt; MongoDB.DebugPrintEnabled: boolean Whether it prints the results of posting (good for debugging) "},{"title":"Functions​","type":1,"pageTitle":"MongoDB","url":"/midas/api/MongoDB#functions","content":" "},{"title":"new​","type":1,"pageTitle":"MongoDB","url":"/midas/api/MongoDB#new","content":"&lt;/&gt; MongoDB.new( apiKey: string, url: string ) → () initializes the class  "},{"title":"InsertMany​","type":1,"pageTitle":"MongoDB","url":"/midas/api/MongoDB#InsertMany","content":"&lt;/&gt; MongoDB:InsertMany( dataSource: string, databaseName: string, collectionName: string, dataList: {[number]: {[string]: any}}, format: {[string]: DataType}, onPayloadSizeInvoke: (size: number) → () ) → boolean sends the data to MongoDB "},{"title":"DataSet","type":0,"sectionRef":"#","url":"/midas/api/DataSet","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"DataSet","url":"/midas/api/DataSet#functions","content":" "},{"title":"CreateDataTable​","type":1,"pageTitle":"DataSet","url":"/midas/api/DataSet#CreateDataTable","content":"&lt;/&gt; DataSet:CreateDataTable( name: string, id: string ) → DataTable&lt;RowData&gt; creates a new datatable  "},{"title":"GetDataTable​","type":1,"pageTitle":"DataSet","url":"/midas/api/DataSet#GetDataTable","content":"&lt;/&gt; DataSet:GetDataTable(name: string) → DataTable&lt;RowData&gt; gets a datatable by name  "},{"title":"Post​","type":1,"pageTitle":"DataSet","url":"/midas/api/DataSet#Post","content":"&lt;/&gt; DataSet:Post( maxEntriesPerTable: number, maxSizePerTable: number, delayPerTable: number, recursive: boolean ) → ( boolean, boolean, number ) posts the current entries from all underlying datatables  "},{"title":"GetRowCount​","type":1,"pageTitle":"DataSet","url":"/midas/api/DataSet#GetRowCount","content":"&lt;/&gt; DataSet:GetRowCount() → number gets number of rows waiting to be processed  "},{"title":"GetDataTables​","type":1,"pageTitle":"DataSet","url":"/midas/api/DataSet#GetDataTables","content":"&lt;/&gt; DataSet:GetDataTables() → {[number]: DataTable&lt;{[string]: unknown}&gt;} gets all tables currently stored under the dataset "},{"title":"Midas","type":0,"sectionRef":"#","url":"/midas/api/Midas","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Midas","url":"/midas/api/Midas#types","content":" "},{"title":"OnAttemptInvokeLogger​","type":1,"pageTitle":"Midas","url":"/midas/api/Midas#OnAttemptInvokeLogger","content":"&lt;/&gt; type OnAttemptInvokeLogger = ( success: boolean, size: number, rowCount: number, currentSizeLimit: number, currentRowLimit: number, rowsRemaining: number, attemptIndex: number, errorMessage: string? ) → () I often run a datatable on the performance of posts to tune the parameters / detect issue / estimate data validity. If you wish to do the same you can with this function.  "},{"title":"FormatDictionary​","type":1,"pageTitle":"Midas","url":"/midas/api/Midas#FormatDictionary","content":"&lt;/&gt; type FormatDictionary = {[string]: DataType} A parameter of OnBatchSaveInvoke. A dictionary of the assigned data types for each key in the rows, used to inform how to structure data in the API requests.  "},{"title":"DataList​","type":1,"pageTitle":"Midas","url":"/midas/api/Midas#DataList","content":"&lt;/&gt; type DataList = {[number]: {[string]: unknown}} A parameter of OnBatchSaveInvoke. A list of dictionaries containing unknown data that can be processed into storage safe data  "},{"title":"PayloadRecorder​","type":1,"pageTitle":"Midas","url":"/midas/api/Midas#PayloadRecorder","content":"&lt;/&gt; type PayloadRecorder = (size: number) → () A parameter of OnBatchSaveInvoke. In order to respect bandwidth limits, Midas attempts to track how much data is being sent out. Once you know how much that is call this function. Native methods like MongoDB will handle it for you, just pass it on as a parameter.  "},{"title":"OnBatchSaveInvoke​","type":1,"pageTitle":"Midas","url":"/midas/api/Midas#OnBatchSaveInvoke","content":"&lt;/&gt; type OnBatchSaveInvoke = ( projectId: string, dataSetId: string, dataTableId: string, dataList: DataList, format: FormatDictionary, onPayloadSizeKnownInvoke: PayloadRecorder ) → boolean The function called by the framework whenever it wants to post data  "},{"title":"DataType​","type":1,"pageTitle":"Midas","url":"/midas/api/Midas#DataType","content":"&lt;/&gt; type DataType = &quot;Binary&quot; | &quot;Date&quot; | &quot;Decimal128&quot; | &quot;Double&quot; | &quot;Int32&quot; | &quot;Int64&quot; | &quot;Boolean&quot; | &quot;Array&quot; | &quot;Object&quot; | &quot;String&quot; The pre-approved storage types. Good for type validation + allocating the most efficient amount of storage space. "},{"title":"Properties​","type":1,"pageTitle":"Midas","url":"/midas/api/Midas#properties","content":" "},{"title":"ProjectId​","type":1,"pageTitle":"Midas","url":"/midas/api/Midas#ProjectId","content":"&lt;/&gt; Midas.ProjectId: string? The project id passed to the posting function "},{"title":"Functions​","type":1,"pageTitle":"Midas","url":"/midas/api/Midas#functions","content":" "},{"title":"init​","type":1,"pageTitle":"Midas","url":"/midas/api/Midas#init","content":"&lt;/&gt; Midas.init() → () → () initializes the package  "},{"title":"Post​","type":1,"pageTitle":"Midas","url":"/midas/api/Midas#Post","content":"&lt;/&gt; Midas:Post( maxEntriesPerTable: number,-- the max number of entries per table you'll be posting maxSizePerTable: number,-- the max amount of data (in characters) that can be sent per table in a single post delayPerTable: number,-- the amount it will wait between post requests, skipped if the table is empty recursive: boolean-- whether it sticks on a single table, delaying and posting until it is empty. ) → ( totalSuccessboolean,-- whether all data tables posted without error totalEmptyboolean,-- whether every datatable is now empty netDatanumber-- the amount of data (in characters) sent by all tables ) This triggers the process of gathering rows for posting for all datatables. All the parameters are meant to help the dev work within the limits of whatever API they use to store data.  "},{"title":"CreateDataSet​","type":1,"pageTitle":"Midas","url":"/midas/api/Midas#CreateDataSet","content":"&lt;/&gt; Midas:CreateDataSet( name: string,-- the key your dataset will be organized under id: string-- the id that's passed to the data posting solution ) → datasetDataSet-- the dataset you just constructed Constructs a dataset  "},{"title":"SetOnBatchSaveInvoke​","type":1,"pageTitle":"Midas","url":"/midas/api/Midas#SetOnBatchSaveInvoke","content":"&lt;/&gt; Midas:SetOnBatchSaveInvoke( onBatchSaveInvoke: OnBatchSaveInvoke-- the function that posts data ) → () Sets the posting function  "},{"title":"GetDataSet​","type":1,"pageTitle":"Midas","url":"/midas/api/Midas#GetDataSet","content":"&lt;/&gt; Midas:GetDataSet(name: string) → DataSet gets a dataset by name  "},{"title":"GetDataSets​","type":1,"pageTitle":"Midas","url":"/midas/api/Midas#GetDataSets","content":"&lt;/&gt; Midas:GetDataSets() → {[number]: DataSet} gets a list of datasets  "},{"title":"GetRowCount​","type":1,"pageTitle":"Midas","url":"/midas/api/Midas#GetRowCount","content":"&lt;/&gt; Midas:GetRowCount() → number gets the number of rows currently waiting to be processed  "},{"title":"Automate​","type":1,"pageTitle":"Midas","url":"/midas/api/Midas#Automate","content":"&lt;/&gt; Midas:Automate( printEnabled: boolean,-- whether you want to print the results of each post (useful for debugging). maxEntriesPerTable: number?,-- The upper limit for how many entries you allow. Defaults to 200. minDurationPerTable: number?,-- The delay after posting a table. Defaults to 1. updateDelay: number?,-- How long Midas will wait for rows to accumulate between runs. averageSizePerRow: number?,-- Used to estimate how much data will be passed by a table. Defaults to 200 escalationRate: number?,-- The speed at which it will alter limits to achieve a successful post. onAttemptInvokeLogger: OnAttemptInvokeLogger?-- A function that is called after each attempted run, used for debugging / logging performance mostly. ) → () Automates the posting of rows, dynamically adapting to handle errors and rate limits as appropriate. "}]