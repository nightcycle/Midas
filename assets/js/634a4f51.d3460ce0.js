"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[327],{39734:e=>{e.exports=JSON.parse('{"functions":[{"name":"Configure","desc":"Allows for the replacement of the default config table, changing the behavior of the framework.","params":[{"name":"deltaConfig","desc":"","lua_type":"ConfigurationData"}],"returns":[{"desc":"","lua_type":"nil\\r\\n"}],"function_type":"method","realm":["Server"],"source":{"line":60,"path":"src/init.lua"}},{"name":"InsertTeleportDataEntry","desc":"When a player is being teleported, pass the teleport data prior to teleporting them through this API. This will ensure the session is tracked as continuing.","params":[{"name":"player","desc":"","lua_type":"Player"},{"name":"teleportData","desc":"","lua_type":"{[any]: any}?"}],"returns":[{"desc":"","lua_type":"{\\r\\n\\tMidasAnalyticsData: TeleportDataEntry,\\r\\n\\t[any]: any\\r\\n}\\r\\n"}],"function_type":"method","realm":["Server"],"source":{"line":96,"path":"src/init.lua"}},{"name":"GetEventSignal","desc":"Provides a pseudo-RBXScriptSignal which will fire whenever an event is sent via HttpService. \\nWhen the Signal is fired it will provide the playerId, path, data, tags, and timestamp in that order.","params":[],"returns":[{"desc":"","lua_type":"_Signal.Signal\\r\\n"}],"function_type":"method","realm":["Server"],"source":{"line":115,"path":"src/init.lua"}},{"name":"init","desc":"Call this on the server to connect PlayFab prior to firing any events.","params":[{"name":"titleId","desc":"","lua_type":"string"},{"name":"devSecretKey","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"nil\\r\\n"}],"function_type":"static","realm":["Server"],"source":{"line":122,"path":"src/init.lua"}}],"properties":[],"types":[{"name":"ConfigurationData","desc":"","lua_type":"{Version: string,SendDeltaState: boolean,PrintEventsInStudio: boolean,SendDataToPlayFab: boolean, Templates: {Join: boolean,Chat: boolean,Population: boolean,ServerPerformance: boolean,Market: boolean,Exit: boolean,Character: boolean,Demographics: boolean,Policy: boolean,ClientPerformance: boolean,Settings: boolean,},}","source":{"line":101,"path":"src/Types.lua"}}],"name":"Interface","desc":"The front-facing module used to integrate a game with the Midas library.\\nReturns a midas configured for that path. If one already exists for that path it will provide that one.","source":{"line":47,"path":"src/init.lua"}}')}}]);