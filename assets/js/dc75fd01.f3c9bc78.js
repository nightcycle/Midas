"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8],{61024:e=>{e.exports=JSON.parse('{"functions":[{"name":"Destroy","desc":"Destroys the midas object","params":[],"returns":[],"function_type":"method","source":{"line":60,"path":"src/Midas.lua"}},{"name":"SetTag","desc":"Adds a tag to all future events from the midas object.","params":[{"name":"key","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"nil\\r\\n"}],"function_type":"method","source":{"line":86,"path":"src/Midas.lua"}},{"name":"RemoveTag","desc":"Removes tag from all future events from the midas object.","params":[{"name":"key","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"nil\\r\\n"}],"function_type":"method","source":{"line":92,"path":"src/Midas.lua"}},{"name":"SetCondition","desc":"Allows for the binding of fire condition blockers. If any return false the midas will not fire.","params":[{"name":"key","desc":"","lua_type":"string"},{"name":"func","desc":"","lua_type":"() -> boolean"}],"returns":[{"desc":"","lua_type":"nil\\r\\n"}],"function_type":"method","source":{"line":98,"path":"src/Midas.lua"}},{"name":"SetRoundingPrecision","desc":"Returns the hierarchy path the midas object was created under.\\nSets the rounding precision of all numbers and vectors to 10^exp paramter. If not exponent parameter is provided it defaults to 0.","params":[{"name":"exp","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"nil\\r\\n"}],"function_type":"method","source":{"line":109,"path":"src/Midas.lua"}},{"name":"Compile","desc":"Creates a dictionary of values resulting from invoking the bound state functions / objects. ","params":[],"returns":[{"desc":"","lua_type":"{[string]: any}? --server only\\r\\n"}],"function_type":"method","source":{"line":184,"path":"src/Midas.lua"}},{"name":"GetUTC","desc":"Returns a UTC format compliant timestamp string from the current tick. An optional offset can be applied to this in seconds.","params":[{"name":"offset","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"string\\r\\n"}],"function_type":"method","source":{"line":225,"path":"src/Midas.lua"}},{"name":"CanFire","desc":"Determines if a midas object meets all the bound conditions.","params":[],"returns":[{"desc":"","lua_type":"boolean\\r\\n"}],"function_type":"method","source":{"line":235,"path":"src/Midas.lua"}},{"name":"Fire","desc":"Fires an event. If series duration is included it will delay sending the event until that duration has passed. It can also fire an end event in that case.","params":[{"name":"eventName","desc":"","lua_type":"string"},{"name":"seriesDuration","desc":"","lua_type":"number?"},{"name":"includeEndEvent","desc":"","lua_type":"boolean?"}],"returns":[{"desc":"","lua_type":"nil\\r\\n"}],"function_type":"method","source":{"line":304,"path":"src/Midas.lua"}},{"name":"SetChance","desc":"Forces the midas object to roll the dice before firing future events. Default is 1, which will always fire the event.","params":[{"name":"val","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"nil\\r\\n"}],"function_type":"method","source":{"line":321,"path":"src/Midas.lua"}},{"name":"GetBoundStateCount","desc":"Gets the number of states currently bound to the midas object.","params":[],"returns":[{"desc":"","lua_type":"number\\r\\n"}],"function_type":"method","source":{"line":328,"path":"src/Midas.lua"}}],"properties":[],"types":[],"name":"Midas","desc":"The heart of the entire framework, allowing for decentralized recording and organizing of in-game state and events.\\nAllows for the binding of state to the midas object.","source":{"line":30,"path":"src/Midas.lua"}}')}}]);