"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8],{61024:e=>{e.exports=JSON.parse('{"functions":[{"name":"Post","desc":"This triggers the process of gathering rows for posting for all datatables. All the parameters are meant to help the dev work within the limits of whatever API they use to store data.","params":[{"name":"maxEntriesPerTable","desc":"the max number of entries per table you\'ll be posting","lua_type":"number"},{"name":"maxSizePerTable","desc":"the max amount of data (in characters) that can be sent per table in a single post","lua_type":"number"},{"name":"delayPerTable","desc":"the amount it will wait between post requests, skipped if the table is empty","lua_type":"number"},{"name":"recursive","desc":"whether it sticks on a single table, delaying and posting until it is empty.","lua_type":"boolean"}],"returns":[{"desc":"whether all data tables posted without error","lua_type":"totalSuccess boolean"},{"desc":"whether every datatable is now empty","lua_type":"totalEmpty boolean"},{"desc":"the amount of data (in characters) sent by all tables","lua_type":"netData number"}],"function_type":"method","source":{"line":117,"path":"src/init.luau"}},{"name":"CreateDataSet","desc":"Constructs a dataset","params":[{"name":"name","desc":"the key your dataset will be organized under","lua_type":"string"},{"name":"id","desc":"the id that\'s passed to the data posting solution","lua_type":"string"}],"returns":[{"desc":"the dataset you just constructed","lua_type":"dataset DataSet"}],"function_type":"method","source":{"line":164,"path":"src/init.luau"}},{"name":"SetOnBatchSaveInvoke","desc":"Sets the posting function","params":[{"name":"onBatchSaveInvoke","desc":"the function that posts data","lua_type":"OnBatchSaveInvoke"}],"returns":[],"function_type":"method","source":{"line":192,"path":"src/init.luau"}},{"name":"GetDataSet","desc":"gets a dataset by name\\r","params":[{"name":"name","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"DataSet\\r\\n"}],"function_type":"method","source":{"line":197,"path":"src/init.luau"}},{"name":"GetDataSets","desc":"gets a list of datasets\\r","params":[],"returns":[{"desc":"","lua_type":"{[number]: DataSet}\\r\\n"}],"function_type":"method","source":{"line":205,"path":"src/init.luau"}},{"name":"GetRowCount","desc":"gets the number of rows currently waiting to be processed\\r","params":[],"returns":[{"desc":"","lua_type":"number\\r\\n"}],"function_type":"method","source":{"line":210,"path":"src/init.luau"}},{"name":"Automate","desc":"Automates the posting of rows, dynamically adapting to handle errors and rate limits as appropriate.","params":[{"name":"printEnabled","desc":"whether you want to print the results of each post (useful for debugging).","lua_type":"boolean"},{"name":"maxEntriesPerTable","desc":"The upper limit for how many entries you allow. Defaults to 200.","lua_type":"number?"},{"name":"minDurationPerTable","desc":"The delay after posting a table. Defaults to 1.","lua_type":"number?"},{"name":"updateDelay","desc":"How long Midas will wait for rows to accumulate between runs.","lua_type":"number?"},{"name":"averageSizePerRow","desc":"Used to estimate how much data will be passed by a table. Defaults to 200","lua_type":"number?"},{"name":"escalationRate","desc":"The speed at which it will alter limits to achieve a successful post.","lua_type":"number?"},{"name":"onAttemptInvokeLogger","desc":"A function that is called after each attempted run, used for debugging / logging performance mostly.","lua_type":"OnAttemptInvokeLogger?"}],"returns":[],"function_type":"method","source":{"line":230,"path":"src/init.luau"}},{"name":"init","desc":"initializes the package\\r","params":[{"name":"maid","desc":"","lua_type":"Maid?"}],"returns":[],"function_type":"static","source":{"line":368,"path":"src/init.luau"}}],"properties":[{"name":"ProjectId","desc":"The project id passed to the posting function\\r","lua_type":"string?","source":{"line":91,"path":"src/init.luau"}}],"types":[{"name":"OnAttemptInvokeLogger","desc":"I often run a datatable on the performance of posts to tune the parameters / detect issue / estimate data validity. If you wish to do the same you can with this function.\\r","lua_type":"(success: boolean, size: number, rowCount: number, currentSizeLimit: number, currentRowLimit: number, rowsRemaining: number, attemptIndex: number, errorMessage: string?) -> ()","source":{"line":77,"path":"src/init.luau"}},{"name":"FormatDictionary","desc":"A parameter of OnBatchSaveInvoke. A dictionary of the assigned data types for each key in the rows, used to inform how to structure data in the API requests.\\r","lua_type":"{[string]: DataType}","source":{"line":17,"path":"src/StorageProviders/Util.luau"}},{"name":"DataList","desc":"A parameter of OnBatchSaveInvoke. A list of dictionaries containing unknown data that can be processed into storage safe data\\r","lua_type":"{[number]: {[string]: unknown}}","source":{"line":23,"path":"src/StorageProviders/Util.luau"}},{"name":"PayloadRecorder","desc":"A parameter of OnBatchSaveInvoke. In order to respect bandwidth limits, Midas attempts to track how much data is being sent out. Once you know how much that is call this function. Native methods like MongoDB will handle it for you, just pass it on as a parameter.\\r","lua_type":"(size: number) -> ()","source":{"line":29,"path":"src/StorageProviders/Util.luau"}},{"name":"OnBatchSaveInvoke","desc":"The function called by the framework whenever it wants to post data\\r","lua_type":"(projectId: string, dataSetId: string, dataTableId: string, dataList: DataList, format: FormatDictionary,onPayloadSizeKnownInvoke: PayloadRecorder) -> boolean","source":{"line":35,"path":"src/StorageProviders/Util.luau"}},{"name":"DataType","desc":"The pre-approved storage types. Good for type validation + allocating the most efficient amount of storage space.\\r","lua_type":"\\"Binary\\" | \\"Date\\" | \\"Decimal128\\" | \\"Double\\" | \\"Int32\\" | \\"Int64\\" | \\"Boolean\\" | \\"Array\\" | \\"Object\\" | \\"String\\"","source":{"line":20,"path":"src/Util.luau"}}],"name":"Midas","desc":"This is the service itself, the main interface which the dev sets up the various data structures.","source":{"line":69,"path":"src/init.luau"}}')}}]);