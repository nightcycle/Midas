"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[331],{3905:(e,a,t)=>{t.d(a,{Zo:()=>u,kt:()=>f});var n=t(67294);function o(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){o(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,o=function(e,a){if(null==e)return{};var t,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(o[t]=e[t]);return o}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),d=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},u=function(e){var a=d(e.components);return n.createElement(s.Provider,{value:a},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=d(t),m=o,f=c["".concat(s,".").concat(m)]||c[m]||p[m]||r;return t?n.createElement(f,l(l({ref:a},u),{},{components:t})):n.createElement(f,l({ref:a},u))}));function f(e,a){var t=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var r=t.length,l=new Array(r);l[0]=m;var i={};for(var s in a)hasOwnProperty.call(a,s)&&(i[s]=a[s]);i.originalType=e,i[c]="string"==typeof e?e:o,l[1]=i;for(var d=2;d<r;d++)l[d]=t[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},76647:(e,a,t)=>{t.r(a),t.d(a,{contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>s});var n=t(87462),o=(t(67294),t(3905));const r={},l="Midas Wally Package",i={type:"mdx",permalink:"/midas/",source:"@site/pages/index.md",title:"Midas Wally Package",description:"This is a package for the easy tracking and validation of analytics data. The goal is to allow you to track as much data as you want, so you can focus on solving problems with the data, rather than just storing and collecting it in the first place.",frontMatter:{}},s=[{value:"Usage",id:"usage",level:2},{value:"1. Initialize Midas",id:"1-initialize-midas",level:3},{value:"2. Define a Storage Solution",id:"2-define-a-storage-solution",level:3},{value:"MongoDB",id:"mongodb",level:4},{value:"3. Define a Table",id:"3-define-a-table",level:3},{value:"4. Add Rows",id:"4-add-rows",level:3},{value:"5. Post",id:"5-post",level:3},{value:"Manual",id:"manual",level:4},{value:"Automated",id:"automated",level:4}],d={toc:s},u="wrapper";function c(e){let{components:a,...t}=e;return(0,o.kt)(u,(0,n.Z)({},d,t,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"midas-wally-package"},"Midas Wally Package"),(0,o.kt)("p",null,"This is a package for the easy tracking and validation of analytics data. The goal is to allow you to track as much data as you want, so you can focus on solving problems with the data, rather than just storing and collecting it in the first place."),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"To seamlessly integrate into the most common standards of data processing workflows, Midas has pivoted away from a free structured tree of data to that of tables."),(0,o.kt)("h3",{id:"1-initialize-midas"},"1. Initialize Midas"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'\n    Midas.init()\n    Midas.ProjectId = "abcdef1234567"\n\n')),(0,o.kt)("h3",{id:"2-define-a-storage-solution"},"2. Define a Storage Solution"),(0,o.kt)("h4",{id:"mongodb"},"MongoDB"),(0,o.kt)("p",null,"One solution I personally use is MongoDB Atlas. You can read how to set that up ",(0,o.kt)("a",{parentName:"p",href:"https://www.mongodb.com/docs/atlas/getting-started/"},"here"),', remember to enabled the "Data API" under the "Services" menu. MongoDB offers a terabyte of storage at a reasonable price. To get the data out there are also ',(0,o.kt)("a",{parentName:"p",href:"https://www.mongodb.com/try/download/shell"},"many official")," MongoDB tools and solutions for that as well."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'    local mongoDB = Midas.StorageProviders.MongoDB.new(\n        "api-key-123", \n        "https://us-east-2.aws.data.mongodb-api.com/app/data-abcdef"\n    )\n    mongoDB.DebugPrintEnabled = RunService:IsStudio()\n    Midas:SetOnBatchSaveInvoke(\n        function(\n            projectId: string,\n            dataSetId: string,\n            dataTableId: string,\n            dataList: { [number]: { [string]: unknown } },\n            format: { [string]: DataType },\n            onPayloadSizeKnownInvoke:(number) -> ()\n        ): boolean\n            return mongoDB:InsertMany(\n                projectId, \n                dataSetId, \n                dataTableId, \n                dataList, \n                format, \n                onPayloadSizeKnownInvoke\n            )\n        end\n    )\n')),(0,o.kt)("h3",{id:"3-define-a-table"},"3. Define a Table"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'    -- midas accepts the rowData as a variadic type, allowing you to have type safety when recording data\n    type RowData = {\n        server_id: string,\n        session_id: string,\n        timestamp: DateTime,\n        user_id: number,\n        is_premium: boolean,\n        friends_in_game: number?,\n        pos_x: number?,\n        pos_y: number?,\n    }\n\n    -- level of organization for datatables\n    local dataSet = Midas:CreateDataSet("UserData", "abc123")\n\n    -- a table with rows and columns\n    local dataTable = dataSet:CreateDataTable("Session", "def456") :: Midas.DataTable<RowData>\n    dataTable:AddColumn("server_id", "String", false)\n    dataTable:AddColumn("session_id", "String", false)\n    dataTable:AddColumn("timestamp", "Date", false)\n    dataTable:AddColumn("user_id", "Int64", false)\n    dataTable:AddColumn("friends_in_game", "Int32", true)\n    dataTable:AddColumn("is_premium", "boolean", false)\n    dataTable:AddColumn("pos_x", "Double", true)\n    dataTable:AddColumn("pos_z", "Double", true)\n\n')),(0,o.kt)("h3",{id:"4-add-rows"},"4. Add Rows"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'    local playerPosition: Vector3?\n\n    dataTable:AddRow({\n        server_id = game.JobId,\n        session_id = "abc-123",\n        timestamp = DateTime.now(),\n        user_id = 123456,\n        is_premium = true,\n        friends_in_game = nil,\n        pos_x = if playerPosition then playerPosition.X else nil,\n        pos_z = if playerPosition then playerPosition.Z else nil,\n    })\n\n')),(0,o.kt)("h3",{id:"5-post"},"5. Post"),(0,o.kt)("h4",{id:"manual"},"Manual"),(0,o.kt)("p",null,"If you want to post all tables at once you can"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"    Midas:Post(50, 400, 1, false)\n")),(0,o.kt)("p",null,"Otherwise if you want to post a specific table that is available as well."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"    dataTable:Post(50, 400)\n")),(0,o.kt)("h4",{id:"automated"},"Automated"),(0,o.kt)("p",null,"If you just want to forget about posting, you can tell Midas to try to manage it for you."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"    Midas:Automate(RunService:IsStudio())\n")))}c.isMDXComponent=!0}}]);